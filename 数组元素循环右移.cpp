/*1008. 数组元素循环右移问题 (20)
一个数组A中存有N（N>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（M>=0）个
位置，即将A中的数据由（A0 A1……AN-1）变换为（AN-M …… AN-1 A0 A1……AN-M-1）
（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动
的方法？
输入格式：每个输入包含一个测试用例，第1行输入N ( 1<=N<=100)、M（M>=0）；第2行输入N个整数,
之间用空格分隔。
输出格式：在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。
输入样例：
6 2
1 2 3 4 5 6
输出样例：
5 6 1 2 3 4*/
//翻译一下 就是能够实现将m个数的最后n个数移到最前面
#include <iostream>
#include <algorithm>//这是C++特有的算法头文件 包含了一些算法函数包括sort等
#include <vector>
using namespace std;
int main() {
    int n, m;
    cin >> n >> m;//从键盘接收两个数 一个设定总共多少个数 一个设定多少个数从最后移到最前面
    vector<int> a(n);//vector是一个动态数组模块类 他的特点是能够动态变化长度
    //而<int>表明只接受int类型的数值
    for (int i = 0; i < n; i++)
        cin >> a[i];//从0到你设定的数前一个的位置 不断地请求你键入对应位置上的值
    if (m != n && m != 0) {//如果要移动的个数不等于数的总个数 并且也不等于0
    //为什么要这样写呢 因为在这两种情况下 相当于没有移动 也没有意义 浪费运行时间
        if (m > n) m = m - n;//如果要移动的个数大于数的个数 那么移动个数就减去 数的个数 这与数学中的循环问题类似
        reverse(begin(a), begin(a) + n);
        reverse(begin(a), begin(a) + m);
        reverse(begin(a) + m, begin(a) + n);
        //注意这个函数是整体颠倒而不是一一交换 联想到整体思维
        //先将所有的数颠倒
        //再将从0开始取要移动的个数的数颠倒
        //再把后面的数倒回去
    }
    for (int i = 0; i < n - 1; i++)
        cout << a[i] << " ";
    cout << a[n - 1];//这边可能是为了输出好看一点吧
    return 0;
}