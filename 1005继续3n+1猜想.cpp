/*1005. 继续(3n+1)猜想 (25)

时间限制
400 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CHEN, Yue
卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。

当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。

现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。

输入格式：每个测试输入包含1个测试用例，第1行给出一个正整数K(<100)，第2行给出K个互不相同的待验证的正整数n(1<n<=100)的值，数字间用空格隔开。

输出格式：每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。

输入样例：
6
3 5 6 7 8 11
输出样例：
7 6*/
//翻译一下 就是进一步优化 把重复的过程复用为一个过程

#include <iostream>
#include <algorithm>
//引入一个功能强大的算法库
//可以在这里找到大量通用的算法
using namespace std;

int cmp(int a, int b) {return a > b;}
//此函数用来返回两个值的最大值 被sort()函数调用了

int main() {
    int n;
    cin >> n;
    int *a = new int [n];
	//根据传入的值确定数组的大小
	//然后用a指针指向这个数组的首地址
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
	//然后对于这个数组根据键入的值 传入数组中每个位置上的值
    int t;
    sort(a, a + n, cmp);
	//sort()函数有三个参数
	//第一个参数是排序的起始地址
	//第二个参数是要排序的结束地址
	//第三个参数是排序的方法 从大到小也可以从小到大
    for (int i = 0; i < n; i++) {
        t = a[i];//通过初始化 便于书写
        while (t != 1 && t != 999) {
            if (t % 2 == 0) {
                t = t / 2;
            } else {
                t = (t * 3 + 1) / 2;
            }//对于从头到尾位置上的数值进行按题目变换
            for (int j = 0; j < n; j++) {
                if(t == a[j] && j != i)
                    a[j] = 999;
					//每当找到一个不是当前位置且与当前数值相同的数值 就把该位置上的数值变为999
					//这边要注意了传入的参数并不是要让你做3n/1计算 只是要让你判断它们3n+1计算的过程中有没有重叠部分
					//这边999就是用来标志重复了的数值 无用的数值 计算中的每一个数值都能复用 所以说数值越大 计算中重复的数值越多
            }
        }//每当一次变换中的值找到重复值就设为无用的999
    }
    sort(a, a + n, cmp);//999排序后到了最前面
    int temp = 0;
    for (int k = n - 1; k >= 0; k--) {
        if (a[k] != 999)
            temp = k;
    }//找到第一个不等于999的下标为temp
	//一般这个数都是所给数中比较大的 在计算他的过程中 包含了许多其他的较小的数值
    for (int m = temp; m < n - 1; m++) {
        cout << a[m] << " ";
    }
    cout << a[n - 1];
    delete [] a;
    return 0;
}